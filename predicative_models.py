# -*- coding: utf-8 -*-
"""NickyT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AcHXoN4eIHdJCgKFNfzabmH8ip9WuigD
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_regression
from sklearn.ensemble import RandomForestClassifier
import seaborn as sns; sns.set()
from sklearn import svm
import sklearn.metrics as sm
import math
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn import preprocessing
import collections
from matplotlib_venn import venn3
from scipy import stats
from itertools import combinations
import time
from math import comb

clients = pd.read_csv('/content/drive/Shareddrives/Data Fest 2023/data/clients.csv',  na_values='-')

clients1=clients.drop(['ClientUno','CreatedUtc','County','StateName','PostalCode'], axis=1)

questions= pd.read_csv('/content/drive/Shareddrives/Data Fest 2023/data/questions.csv',  na_values='-')

questions1=questions.iloc[:,4]

client_questions= pd.concat([clients1, questions1], axis=1)
client_questions

client_questions_reduced=client_questions.dropna()

client_questions_reduced

print(client_questions_reduced['EthnicIdentity'].unique())

reduced_ethnicicity_list=['Asian', 'African', 'Caucasian', 'Other', 'Latino or Hispanic', 'African American', 'East Indian', 'Slavic', 'Native Hawaiian / Pacific Islander', 'Native American or Alaska Native', "I'd rather not answer"]

for i in range(len(client_questions_reduced)):
  if client_questions_reduced.iloc[i,2] not in reduced_ethnicicity_list:
    client_questions_reduced.iloc[i,2]= "Mixed"

print(client_questions_reduced['EthnicIdentity'].unique())

state_list=client_questions_reduced['StateAbbr'].unique()
state_list= sorted(state_list)
gender_list=client_questions_reduced['Gender'].unique()
marital_list=client_questions_reduced['MaritalStatus'].unique()
ethnicity_list=client_questions_reduced['EthnicIdentity'].unique()

clean_data=client_questions_reduced
clean_data['StateAbbr'].replace(state_list, range(len(state_list)), inplace=True)
clean_data['Gender'].replace(gender_list, range(len(gender_list)), inplace=True)
clean_data['MaritalStatus'].replace(marital_list, range(len(marital_list)), inplace=True)
clean_data['EthnicIdentity'].replace(ethnicity_list, range(len(ethnicity_list)), inplace=True)
clean_data['Veteran'].replace(['No', 'Yes'],[0, 1], inplace=True)
clean_data['Imprisoned'].replace(['No', 'Yes'],[0, 1], inplace=True)
clean_data

clean_data1=clean_data
clean_data1.insert(14, "Money", 0 )
for i in range(len(clean_data1)):
  clean_data1.iloc[i,14]=(clean_data1.iloc[i,9]+clean_data1.iloc[i,10]+clean_data1.iloc[i,11]+clean_data1.iloc[i,12]+clean_data1.iloc[i,13])/clean_data1.iloc[i,8]
clean_data1

#model the data in a pairplot using the new column as a classifier
sns.pairplot(clean_data1, height=2.5, hue='Category')

#happinessX is all the columns of attributes
clientX= clean_data1.iloc[:,1:15]
#happinessY is the new happiness classifier column
clientY= clean_data1.iloc[:,15]

#split the data to train and test
X_train, X_test, y_train, y_test = train_test_split(clientX, clientY, test_size=0.33, random_state=1)

clientX

#create a logistic regression model
logreg = LogisticRegression(solver='lbfgs', multi_class='multinomial', random_state=1)
#fit the data
logreg.fit(X_train, y_train)
#examine the accuracy of the logreg model using test data
logreg.score(X_test, y_test)

# get importance
#labels=['GDP','Social Support','Life Expectancy','Freedom','Generosity','Corruption']
importance = logreg.coef_[0]
# summarize feature importance
for i,v in enumerate(importance):
    print('Feature: %0d, Score: %.5f' % (i,v))
# plot feature importance
plt.bar([x for x in range(len(importance))], importance)
plt.xlabel('Factors')
plt.ylabel('Importance')
plt.title('Logistic Regression Factor Importance')
plt.show()

clf = svm.SVC(gamma='scale')
#fit the data
clf.fit(X_train, y_train)
#examine the accuracy of the svc model using test data
clf.score(X_test, y_test)

#define the model
model = RandomForestClassifier()
#train the random forest classifier
model.fit(X_train, y_train)
#test the random forest classifier with test data
model.score(X_test,y_test)

importance1 = model.feature_importances_
# summarize feature importance
for i,v in enumerate(importance1):
	print('Feature: %0d, Score: %.5f' % (i,v))
# plot feature importance
plt.bar([x for x in range(len(importance1))], importance1)
plt.xlabel('Factors')
plt.ylabel('Importance')
plt.title('Random Forest Classifier Factor Importance')
plt.show()

from sklearn import tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(clientX, clientY)
tree.plot_tree(clf)

clf.score(clientX, clientY)

import graphviz
dot_data = tree.export_graphviz(clf, out_file=None)
graph = graphviz.Source(dot_data)
graph.render("df")
graph

df8=clean_data1.iloc[:,[9,15]]
df8['Classification']=0
for i in range(len(df8['Classification'])):
  if df8.iloc[i,0] < np.percentile(df8['AnnualIncome'],25):
    df8.iloc[i,2]=1
  if df8.iloc[i,0]>=np.percentile(df8['AnnualIncome'],25) and df8.iloc[i,0]<np.percentile(df8['AnnualIncome'],50):
    df8.iloc[i,2]=2
  if df8.iloc[i,0]>=np.percentile(df8['AnnualIncome'],50) and df8.iloc[i,0]<np.percentile(df8['AnnualIncome'],75):
    df8.iloc[i,2]=3
  if df8.iloc[i,0]>=np.percentile(df8['AnnualIncome'],75):
    df8.iloc[i,2]=4
df8

#group by genotype
g1= df8.groupby('Classification')
for id, id_df in g1:
  print(id)
  print(id_df)

df81=g1.get_group(1)
df81=df81.drop(['AnnualIncome'], axis=1)
pie81=df81.groupby('Category').size()
#plt.pie(pie81.values, labels = pie81.index)

# Creating dataset
labels = pie81.index
data = pie81.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("Bottom 25%ile Income Question Distribution")

# show plot
plt.savefig('Bottom25Income.png')
plt.show()

df82=g1.get_group(2)
df82=df82.drop(['AnnualIncome'], axis=1)
pie82=df82.groupby('Category').size()

# Creating dataset
labels = pie82.index
data = pie82.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("50%ile Income Question Distribution")

# show plot
plt.show()

df83=g1.get_group(3)
df83=df83.drop(['AnnualIncome'], axis=1)
pie83=df83.groupby('Category').size()

# Creating dataset
labels = pie83.index
data = pie83.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("75%ile Income Question Distribution")

# show plot
plt.show()

df84=g1.get_group(4)
df84=df84.drop(['AnnualIncome'], axis=1)
pie84=df84.groupby('Category').size()

# Creating dataset
labels = pie84.index
data = pie84.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("Top 25%ile Income Question Distribution")

# show plot
plt.savefig('top25Income.png')
plt.show()

pieall=pd.concat([df81,df82,df83,df84])
pieall=pieall.groupby('Category').size()
# Creating dataset
labels = pieall.index
data = pieall.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("Top 25%ile Income Question Distribution")

# show plot
plt.savefig('AllIncome.png')
plt.show()

df13=clean_data1.iloc[:,[13,15]]
df13['Classification']=0
for i in range(len(df13['Classification'])):
  if df13.iloc[i,0] < np.percentile(df13['InvestmentsBalance'],25):
    df13.iloc[i,2]=1
  if df13.iloc[i,0]>=np.percentile(df13['InvestmentsBalance'],25) and df13.iloc[i,0]<np.percentile(df13['InvestmentsBalance'],50):
    df13.iloc[i,2]=2
  if df13.iloc[i,0]>=np.percentile(df13['InvestmentsBalance'],50) and df13.iloc[i,0]<np.percentile(df13['InvestmentsBalance'],75):
    df13.iloc[i,2]=3
  if df13.iloc[i,0]>=np.percentile(df13['InvestmentsBalance'],75):
    df13.iloc[i,2]=4
df13

#group by genotype
g2= df13.groupby('Classification')
for id, id_df in g2:
  print(id)
  print(id_df)

df131=g2.get_group(1)
df131=df131.drop(['InvestmentsBalance'], axis=1)
pie131=df131.groupby('Category').size()
#plt.pie(pie81.values, labels = pie81.index)

# Creating dataset
labels = pie131.index
data = pie131.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("25%ile Investment Question Distribution")

# show plot
plt.show()

df132=g2.get_group(2)
df132=df132.drop(['InvestmentsBalance'], axis=1)
pie132=df132.groupby('Category').size()
#plt.pie(pie81.values, labels = pie81.index)

# Creating dataset
labels = pie132.index
data = pie132.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("50%ile Investment Question Distribution")

# show plot
plt.show()

df133=g2.get_group(3)
df133=df133.drop(['InvestmentsBalance'], axis=1)
pie133=df133.groupby('Category').size()
#plt.pie(pie81.values, labels = pie81.index)

# Creating dataset
labels = pie133.index
data = pie133.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("25%ile Investment Question Distribution")

# show plot
plt.show()

df134=g2.get_group(4)
df134=df134.drop(['InvestmentsBalance'], axis=1)
pie134=df134.groupby('Category').size()
#plt.pie(pie81.values, labels = pie81.index)

# Creating dataset
labels = pie134.index
data = pie134.values
#explode = (0.1, 0.0, 0.3, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0)

# Creating color parameters
colors = ( "orange", "cyan", "brown", "grey", "indigo", "beige", "red", "blue", "green", "purple")

# Wedge properties
wp = { 'linewidth' : 1, 'edgecolor' : "green" }

# Creating autocpt arguments
def func(pct, allvalues):
    absolute = int(pct / 100.*np.sum(allvalues))
    return "{:.1f}%".format(pct, absolute)

# Creating plot
fig, ax = plt.subplots(figsize =(10, 7))
wedges, texts, autotexts = ax.pie(data,
                                  autopct = lambda pct: func(pct, data),
                                  #explode = explode,
                                  labels = labels,
                                  shadow = True,
                                  colors = colors,
                                  startangle = 90,
                                  wedgeprops = wp,
                                  textprops = dict(color ="black"))

# Adding legend
ax.legend(wedges, labels,
          title ="Questions",
          loc ="center left",
          bbox_to_anchor =(1.3, 0, 0.5, 1))

plt.setp(autotexts, size = 8, weight ="bold")
ax.set_title("100%ile Investment Question Distribution")

# show plot
plt.show()